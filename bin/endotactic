#!/bin/sh
##
# Endotactic test
#
# Tests whether a CRN is endotactic or strongly endotactic. GLPK code by Matthew Johnston, POSIX shell
# script wrapper code by Pete Donnell.
#
# @author     Matthew Johnston <mjohnston3 at wisc dot edu>
# @author     Pete Donnell <pete dot donnell at port dot ac dot uk>
# @copyright  University of Wisconsin-Madison, University of Portsmouth, Kitson Consulting Limited 2014
# @license    https://gnu.org/licenses/gpl-3.0-standalone.html
# @created    05/07/2014
# @modified   05/07/2014
##

# Check that glpsol is available and that this script was invoked correctly
GLP=$(which glpsol)
if [ -z $GLP ]
then
	echo "Error: glpsol binary not found"
	exit 1
fi
if [ $# -ne 1 ]
then
	echo "Usage: endotactic <filename>"
	exit 2
fi

# Construct GLPK code to test endotacticity
END_GLP=$(mktemp -t glpk)
echo "/* sets */
set REACTIONS;
set REACTANTS;

/* parameters */

param Ys {i in REACTANTS, j in REACTIONS};
param Gamma {i in REACTANTS, j in REACTIONS};
param eps;
param delt;


/* decision variables */

var w {i in REACTANTS} >=-delt <=delt;
var R0 {i in REACTIONS} >=0 <=1, integer;
var Rn {i in REACTIONS} >=0 <=1, integer;


/* objective function */

minimize z:  sum{i in REACTIONS} -Rn[i];


/* constraints */

s.t. const1{i in REACTIONS} : sum{k in REACTANTS} w[k]*Gamma[k,i] <= delt*(1-R0[i]);
s.t. const2{i in REACTIONS} : -sum{k in REACTANTS} w[k]*Gamma[k,i] <= delt*(1-R0[i]);
s.t. const3{i in REACTIONS} : Rn[i] <= 1-R0[i];
s.t. const5{i in REACTIONS} : sum{k in REACTANTS} w[k]*Gamma[k,i] <= delt*(1-Rn[i])-eps;
s.t. const6{i in REACTIONS, j in REACTIONS: i <> j} : sum{k in REACTANTS} w[k]*(Ys[k,i]-Ys[k,j]) <= delt*(1-Rn[i]+Rn[j]+R0[j]);




/* data section */

data;" > $END_GLP

cat "$1" >> $END_GLP

echo "param eps:=0.1;
param delt:=10;

end;" >> $END_GLP

# Check whether network is endotactic
# N.B. Pipe through {} required to work around Bash subshell scoping, see
# http://nion.modprobe.de/blog/archives/531-Altering-a-variable-outside-the-scope-of-a-loop-influenced-by-a-subshell.html
$GLP --math $END_GLP | {
ENDOTACTIC=false
while read i
do
	printf %s\\n "$i" >&2
	RESULT=$(printf %s\\n "$i" | grep 'tree is empty')
	if [ "$RESULT" ]
	then
		NOT_ENDOTACTIC=$(printf %s\\n $RESULT | grep -)
		if [ "$NOT_ENDOTACTIC" ]
		then
			printf %s\\n 'This CRN is not endotactic.'
		else
			ENDOTACTIC=true
		fi
	fi
done

# Check whether network is strongly endotactic
if [ "$ENDOTACTIC" = true ]
then
	# Construct GLPK code to test strong endotacticity
	echo "/* sets */
set REACTIONS;
set REACTANTS;

/* parameters */

param Ys {i in REACTANTS, j in REACTIONS};
param Gamma {i in REACTANTS, j in REACTIONS};
param eps;
param delt;


/* decision variables */

var w {i in REACTANTS} >=-delt <=delt;
var R0 {i in REACTIONS} >=0 <=1, integer;
var Rn {i in REACTIONS} >=0 <=1, integer;
var supp >=0 <=1, integer;


/* objective function */

minimize z:  sum{i in REACTIONS} -Rn[i];


/* constraints */

s.t. const1{i in REACTIONS} : sum{k in REACTANTS} w[k]*Gamma[k,i] <= delt*(1-R0[i]);
s.t. const2{i in REACTIONS} : -sum{k in REACTANTS} w[k]*Gamma[k,i] <= delt*(1-R0[i]);
s.t. const3{i in REACTIONS} : Rn[i] <= 1-R0[i];
s.t. const4{i in REACTIONS} : sum{k in REACTANTS} w[k]*Gamma[k,i] <= delt*(1-Rn[i])-eps;
s.t. const5{i in REACTIONS, j in REACTIONS: i <> j} : sum{k in REACTANTS} w[k]*(Ys[k,i]-Ys[k,j]) <= delt*(1-R0[i]+R0[j])-eps;
s.t. const6 : 1-supp <= delt*sum{i in REACTIONS} R0[i];
s.t. const7 : supp-1 <= delt*sum{i in REACTIONS} R0[i];
s.t. const8{i in REACTIONS, j in REACTIONS: i <> j} : sum{k in REACTANTS} w[k]*(Ys[k,i]-Ys[k,j]) <= delt*(2-Rn[i]+Rn[j]-supp);



/* data section */

data;" > $END_GLP
	cat "$1" >> $END_GLP
	echo "param eps:=0.1;
param delt:=10;

end;" >> $END_GLP

	$GLP --math $END_GLP | while read i
	do
		printf %s\\n "$i" >&2
		RESULT=$(printf %s\\n "$i" | grep 'tree is empty')
		if [ "$RESULT" ]
		then
			NOT_S_ENDOTACTIC=$(printf %s\\n $RESULT | grep -)
			if [ "$NOT_S_ENDOTACTIC" ]
			then
				printf %s\\n 'This CRN is endotactic but not strongly endotactic.'
			else
				printf %s\\n 'This CRN is strongly endotactic.'
			fi
		fi
	done
fi
}

# Clean up temporary file
rm -f $END_GLP
